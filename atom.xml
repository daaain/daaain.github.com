<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[I am dain]]></title>
  <link href="http://danieldemmel.me/atom.xml" rel="self"/>
  <link href="http://danieldemmel.me/"/>
  <updated>2017-07-27T14:54:44+01:00</updated>
  <id>http://danieldemmel.me/</id>
  <author>
    <name><![CDATA[Daniel Demmel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Give app servers a REST – CDNs and APIs are the new LAMP]]></title>
    <link href="http://danieldemmel.me/blog/2017/07/12/Give-app-servers-a-REST-CDNs-and-APIs-are-the-new-LAMP/"/>
    <updated>2017-07-12T19:11:00+01:00</updated>
    <id>http://danieldemmel.me/blog/2017/07/12/Give-app-servers-a-REST-CDNs-and-APIs-are-the-new-LAMP</id>
    <content type="html"><![CDATA[<h2>Video</h2>

<div class="video-container">
  <iframe src="https://player.vimeo.com/video/227249251?color=c9ff23" width="500" height="281" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
</div>


<p>Video recorded by Skills Matter, originally appeared on: <a href="https://skillsmatter.com/skillscasts/10234-give-app-servers-a-rest-cdns-and-apis-are-the-new-lamp">https://skillsmatter.com/skillscasts/10234-give-app-servers-a-rest-cdns-and-apis-are-the-new-lamp</a>.</p>

<h2>Talk transcript</h2>

<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.001.jpeg" alt="Slide 01" /></p>

<p>Today I’m here to talk about a different approach to working with web apps, which was a big mindset shift for me, so I’m very excited to share it with you!</p>

<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.002.jpeg" alt="Slide 02" /></p>

<p>But before I get into the technical bits, I’d like to talk a bit about water, as different ways of accessing it have a lot of interesting parallels to web apps!</p>

<p>As you probably know, water is a very precious resource. A clean water supply is the single most important determinant of public health.</p>

<p>The plaque on this photo is in the memory of William Pranket in the village of Stoke Sub Hamdon, where his well was the only source of water until the early 20th century.</p>

<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.003.jpeg" alt="Slide 03" /></p>

<p>Improvements in delivering water to people are relatively recent, and far from consistent around the World.</p>

<p>A good example is Hong Kong, where until 1964 water rationing was a constant reality, occurring more than 300 days per year.</p>

<p>In the worst crisis, water was delivered only every 4 days for 4 hours each time.</p>

<p>In this photo you can see how bad the situation became, people had to queue in the sun for hours to get some water from the public well.</p>

<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.004.jpeg" alt="Slide 04" /></p>

<p>So these shared wells suffer from a few different problems:</p>

<ul>
<li>People need to potentially go very far from their house, and queue while the water is drawn for the people in front of them</li>
<li>It’s impossible to completely isolate the well and the water source from contamination (as you can see in this illustration), which leads to doubtful safety</li>
<li>Relying on a single groundwater reserve or spring, each well is exposed to droughts, making water temporarily unavailable at times</li>
</ul>


<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.005.jpeg" alt="Slide 05" /></p>

<p>While current municipal water systems of course aren’t perfect either, the service is much better than public wells.</p>

<p>They make access to water quick, by bringing it close to the point of use through an extensive network.</p>

<p>Water coming out of the tap is safe – it’s difficult to compromise the sealed, underground pipes.</p>

<p>Supply is reliable – the available water sources are interconnected and widely distributed, getting rid of inconsistencies.</p>

<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.006.jpeg" alt="Slide 06" /></p>

<p>Unfortunately a lot of time facts alone are not quite enough to enact change…</p>

<p>This is the map of the infections in the Broad Street cholera outbreak in Soho, London, as drawn by a physician John Snow in his study in 1854.</p>

<p>All the incidents were centred around the Broad Street pump, a public water access point.</p>

<p>Snow’s hypothesis was that contaminated water, not air, was the source of illness and he designed the World’s first double blind experiment to verify his theory.</p>

<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.007.jpeg" alt="Slide 07" /></p>

<p>But since people have always been people, the scientific evidence left the Members of Parliament unmoved and no substantive action was taken.</p>

<p>That is, until 4 years after the study, when the historic heatwave of 1858 came.</p>

<p>Temperatures soaring well above 40°C made the level of the river Thames drop dramatically, exposing more than 2 metres of raw sewage, which quickly started to ferment and caused an unbearable stink.</p>

<p>As the recently rebuilt Houses of Parliament were right next to the river, the stench suddenly created a very strong political will for action where the science could not, so the drafting and passage of new laws to fund a new sewer scheme – on a scale the World hasn’t seen before – happened in just 18 days.</p>

<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.008.jpeg" alt="Slide 08" /></p>

<p>So how do these stories relate to the Web?</p>

<p>As you might have guessed, wells represent the current centralised app server paradigm.</p>

<p>But what do I mean by “centralised app server”? I used LAMP in the title of the talk, but what I’m going to talk about is true for all stacks, where there is a constantly running application daemon on a server somewhere, responsible for dynamically responding with some web content, be it written in PHP, Ruby, Java, Go, Javascript, .NET, Python or anything else.</p>

<p>I call them “app servers” to create a distinction with web servers (like Apache or Nginx), ones which you need no matter what, to listen and send HTTP responses even if you just have the simplest HTML file to show.</p>

<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.009.jpeg" alt="Slide 09" /></p>

<p>So the characteristics of this architecture is:</p>

<ul>
<li>Executing some application code for most requests – at the very least rendering templates</li>
<li>Content often stored in a database – where constructing a page might mean complicated queries</li>
<li>Orchestrating multiple server instances for scaling can be tricky, both from an application code and infrastructure perspective</li>
</ul>


<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.010.jpeg" alt="Slide 10" /></p>

<p>So what’s wrong with this approach?</p>

<p>It’s just a bit too easy to have problems with performance, security, reliability and resource use.</p>

<p>Let’s have a look at these one by one!</p>

<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.011.jpeg" alt="Slide 11" /></p>

<p>If a web application needs to execute code and do database queries, no matter how well it is optimised, the response will take some time to prepare.</p>

<p>Caching can help with the issue, but it’s tricky to get right as I’ll explain in a moment.</p>

<p>Also, unless you have a massive hosting budget and some dedicated dev ops time to set up instances in different regions, and tie them together with load balancers, the further people are from your server, the bigger their network delay be – if you ever used the web in Australia, it’s not fun.</p>

<p>Google AMP and Facebook Instant Articles wouldn’t be around if this wasn’t a huge problem, but is creating walled gardens really a great solution?</p>

<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.012.jpeg" alt="Slide 12" /></p>

<p>So caching is a sensible first step for a speedier response, before getting on the journey with instance scaling.</p>

<p>But for a web stack which consists of multiple layers to produce the final content, caching might end up being implemented in various places.</p>

<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.013.jpeg" alt="Slide 13" /></p>

<p>Unfortunately the complexity of multi layer cache can quickly spiral out of control.</p>

<p>Invalidating cache is one of the hardest problems in software development, so doing it in multiple places and between multiple disciplines becomes truly mind bending.</p>

<p>So what started as a simple web site or web app will start to require some serious infrastructure and tooling work.</p>

<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.014.jpeg" alt="Slide 14" /></p>

<p>It feels like there isn’t a week passing nowadays without a serious security vulnerability exposed in one back-end framework or another, and possibly even more undisclosed ones silently exploited.</p>

<p>And it’s not because they are poorly written, but the more they try to do for us, the bigger the potential attack surface is, especially in the hands of less security conscious users and developers, which let’s be honest, is most of us.</p>

<p>While fixing a security problem might mean a few sleepless nights for developers, a mass data breach can easily mean a collapsed business due to evaporating trust.</p>

<p>Despite this, keeping on top of security updates is usually very low on most web team’s todo list.</p>

<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.015.jpeg" alt="Slide 15" /></p>

<p>It seems there is no perfect world with web sites: it’s a problem if no one bothers to visit them, or if they suddenly see a lot of visitors and they stop responding.</p>

<p>What’s the worst is that in most cases they can’t even show read only content, so even though the server side app should really only be needed for user interaction, the content itself also becomes inaccessible - Reddit is the perfect example for this.</p>

<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.016.jpeg" alt="Slide 16" /></p>

<p>According to a study by Jonathan Koomey, a Stanford University professor:</p>

<ul>
<li>Data centres worldwide are estimated to have ten million unused servers, which could be hiding a potential cost of 30 billion dollars</li>
<li>So around 30% of the world’s physical servers are sitting in a “comatose” or “zombie” state, as no information or compute services have been processed for at least six months</li>
<li>Even more surprisingly, a similar percentage of virtual machines are also zombies, despite them being more expensive and easier to manage</li>
<li>If shut down, the servers could reduce electricity load by at least 4GWs, not even mentioning the cost of manufacturing and housing them</li>
<li>These numbers are just the tip of the iceberg (as servers which are idle most of the time but do some work every now and then are excluded), so the potential cost and environmental savings are huge</li>
</ul>


<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.017.jpeg" alt="Slide 17" /></p>

<p>Now after having talked about the problem, let me walk you through the promise of this fabled new way of doing things.</p>

<p>The piped water in my little story at the beginning represented a new approach, which can be described as “distributed asset delivery with serverless computing”.</p>

<p>So there are two important parts in this – admittedly quite long – name:</p>

<ul>
<li>Firstly, the distributed asset delivery means finding a way to deliver a web app’s assets (be that HTML, CSS, Javascript, images, fonts, videos, and so on) from a web server as close to visitors as possible</li>
<li>Secondly, to handle any sort of user interaction which needs data manipulation, communication, payments or any action really, in a way which avoids running your own, persistent app servers</li>
</ul>


<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.018.jpeg" alt="Slide 18" /></p>

<p>So what are the characteristics of this approach?</p>

<ul>
<li>Content and assets are preprocessed as much as possible before deployment</li>
<li>Any dynamic functionality and data is delivered through APIs – accessible both at compile time and in the browser client</li>
<li>Static assets are served up from a distributed host – typically a CDN</li>
</ul>


<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.019.jpeg" alt="Slide 19" /></p>

<p>So how does something built with this architecture would look like from a visitor’s point, or in other words the front-end side?</p>

<p>If you have a look at how progressive web apps work, they pretty much embody the idea:</p>

<ul>
<li>You start out with an application shell built from static assets, very similar to native mobile apps, just without the extra friction of discovery and explicit download</li>
<li>The content inside can be pre-rendered for the first load, but a Single Page Application takes over navigation and data loading on the client side, once the Javascript app bootstrapped</li>
<li>With browsers implementing Service Workers, this means complete offline support using the existing app shell and already downloaded data</li>
<li>So once running, these apps only need to connect to APIs, which can be served up completely independently of where the application assets are originally from</li>
</ul>


<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.020.jpeg" alt="Slide 20" /></p>

<p>So this provides us with a potential for a big mindset shift, but first of all let me give you a quick introduction to CDNs. The acronym stands for Content Delivery Networks, and they are mostly known for delivering videos and images as a way to take some of the heavy load off web servers.</p>

<p>But there’s no reason for us to stop there, why not use CDNs as the first point of contact right from the DNS response?</p>

<p>Interestingly this would take us one step closer to Tim Berners-Lee’s original vision of a distributed web, where even catastrophic events can’t take the entire network down – in stark contrast with the AWS S3 outage this February, which took several massive services down, despite only happening in just one of their data centres in the US. And the biggest irony was that Amazon engineers themselves were unable to update their status dashboard as it relied on the same host.</p>

<p>That said, today’s CDNs are still centrally controlled networks of servers, but the largest ones have hundreds of independent endpoints (or in industry jargon: Points of Presence) around the World – including places which are not the US and Europe, I can assure you they do exist!</p>

<p>What makes using CDNs easier nowadays is that they are more and more scriptable through APIs, so for example easier to flush content, even just partially.</p>

<p>My current favourite host is Netlify, they are pretty much the Heroku of smart CDN based hosting and also do some great open source work in this space.</p>

<p>But the future can be completely distributed: IPFS – which stands for InterPlanetary File System – mixed up ideas and technologies from BitTorrent and the blockchain amongst others.</p>

<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.021.jpeg" alt="Slide 21" /></p>

<p>But since CDNs can only work with static content, for any interaction requiring computing we still need to connect to an API.</p>

<p>These APIs of course do need a server to run on, but it doesn’t need to be a constantly running one provisioned and managed by you, eating money even when not in use or getting overloaded so you need to scramble to scale.</p>

<p>Serverless functions (or Function as a Service) can be a great solution for a lot of backend needs, especially when they are connected to a managed database to persist state and data.</p>

<p>But Sports Direct, Deliveroo, Uber or any other firms employing zero hours contractors are waking up to the reality that they can’t wiggle out of all their responsibilities…</p>

<p>Despite all the hype, these serverless functions of course still won’t write, deploy and maintain themselves…</p>

<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.022.jpeg" alt="Slide 22" /></p>

<p>So before writing a single line of code, you can be even better off considering servicefull APIs, or in other words hosted services offered as APIs.</p>

<p>While the idea has been around since Web 2.0 was a thing, nowadays you can find great services even for core functions like:</p>

<ul>
<li>Auth0 for authentication and authorisation</li>
<li>Firebase for storing user data</li>
<li>Contentful for creating content on an editor friendly interface, and so on</li>
</ul>


<p>So unless you’re dealing with a service already on a massive scale, the developer time and worry you can save will more than pay for the cost of these “humble sweatshops”.</p>

<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.023.jpeg" alt="Slide 23" /></p>

<p>If you think these metaphors were a bit contentious, you’re totally right. But rather than having the intention of making fun of the people who are suffering, I’d actually like to use this platform to dedicate a few sentences to them.</p>

<p>I think we – the tech community as a whole – aren’t doing a great job at giving enough respect to people around us. Which is in stark contrast with who much we obsess about computers and gadgets.</p>

<p>So if you take away only one thing from this talk, let that be taking a moment every now and then to think about the impact of your work and your words on the people around you and in the wider World, especially if they are not like you!</p>

<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.024.jpeg" alt="Slide 24" /></p>

<p>Right, after this little digression, let’s see how these solutions help with the issues I talked about earlier.</p>

<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.025.jpeg" alt="Slide 25" /></p>

<p>I split each of these between the two parts, so the distributed asset delivery via CDNs and serverless computing.</p>

<p>So performance with CDNs is a joy to see really, since they are only dealing with files and each visitor will get them from the nearest endpoint, load times are pretty much instant.</p>

<p>At the same time, computing on serverless infrastructure automatically scales to whatever the demand is (except for the most extreme cases).</p>

<p>While in your own server no one stops you from shooting yourself in the foot, in a Function as a Service you have to work within limits, so for example on AWS Lambda any execution has to finish within 300 seconds, which might sound like a lot, but knowing the constraints will make you think about splitting up, measuring and optimising functions earlier.</p>

<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.026.jpeg" alt="Slide 26" /></p>

<p>Just a bunch of files on a CDN is practically impossible to hack, but even better, there’s not much in it to do, so it’s unlikely many people will even try.</p>

<p>The virtual machines and containers running your serverless code are transient by nature, so they don’t stick around long enough to give people time to hack into.</p>

<p>Also, once they are spun down, security updates can be applied right away without any disruption, so next time they run, you’ll get a freshly updated container image.</p>

<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.027.jpeg" alt="Slide 27" /></p>

<p>Due to their distributed nature, CDNs are very resilient to denial of service attacks, but even if a well resourced adversary manages to take one down, migrating files to another one is not difficult.</p>

<p>Serverless infrastructure mostly operates on containers, which are very quick to spin up, so unless you go completely nuts with dependencies, even cold starts will be at an acceptable speed.</p>

<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.028.jpeg" alt="Slide 28" /></p>

<p>Again, since CDNs serve only files, there’s not much computing they need to do other than routing. But also, by using and endpoint close to visitors, less network hops will be used, saving on using resources on each switch on the way.</p>

<p>And with serverless, idle time is minimised by cleaning up containers after a very short time, while at the same time you also don’t need to over-provision due to the ability to scale on demand.</p>

<p>These translate to big savings both in terms of monetary and environmental resources.</p>

<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.029.jpeg" alt="Slide 29" /></p>

<p>So how can you get started, you must be thinking “surely it’s a lot of work to do all these new things”?</p>

<p>Well, it used to be, and only big and tech heavy organisations like the Guardian, Google or Alibaba could afford to develop custom solutions for them in house. But hey, it’s 2017 and I work for a studio where we often don’t have more that 6 weeks to turn projects around from business problems to a few versions deployed, so I wouldn’t be here if there weren’t tools available to do most of the hard work for me!</p>

<p>Static website generators have been around for years now, and people have great times with them producing websites based around content. But these are static web sites, lacking the modern browser based powers of web apps which people more and more expect now.</p>

<p>So it was only a matter of time until a new generation emerged, which I call “progressive web app pipelines” and will explain them in a moment.</p>

<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.030.jpeg" alt="Slide 30" /></p>

<p>But first let’s have a look at what static website generators do, just so it’s clear what I’m talking about. The poster child for these is Jekyll, which is the Ruby based generator behind Github Pages. It’s been around for ages and is remarkably good at producing simple and fast websites, taking it way beyond the original role of generating documentation sites for open source projects.</p>

<p>The way it works is taking Markdown content files with YAML metadata and putting them in various Liquid templates. This process does a great job at producing HTML and CSS, but Javascript is just an afterthought, stuck in the jQuery era of DOM selectors.</p>

<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.031.jpeg" alt="Slide 31" /></p>

<p>So what do these new progressive web app pipelines do beyond that?</p>

<p>This diagram is from Gatsby, an open source tool which just emerged from a full rewrite with the final 1.0 version released last Thursday
So what makes it a big deal?</p>

<ul>
<li>First, it takes more than files as input, there are already plugins out there which can dump data from APIs like Contentful’s, Twitter’s or Instagram’s</li>
<li>Second, it aggregates all the content and assets and creates a GraphQL API to work with them, so you can have custom queries co-located with front-end components, including generating image sizes appropriate for various contexts</li>
<li>Third, it generates a fully formed PWA together with pre-generated JSON data files, ready to be deployed on a static host</li>
</ul>


<p>Some key ingredients in this are:</p>

<ul>
<li>React, with its mature support for server side (or in this case compile time) generation and great ecosystem of tools like the Redux state manager</li>
<li>And Webpack with its similarly huge ecosystem, as an advanced build tool providing the pipeline and plugins for processing all assets</li>
</ul>


<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.032.jpeg" alt="Slide 32" /></p>

<p>But I don’t want to look like I’m blindly worshipping Gatsby, there’s another similar open source tool called Phenomic which is also well worth checking out, especially if you don’t want to use React for any reason, as they are working on supporting multiple Javascript single page application choices.</p>

<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.033.jpeg" alt="Slide 33" /></p>

<p>What makes all of these tools tick though is a big, fat asset compiler, which does the hard work at build time. What this means is some high level orchestration code, which makes – in these cases – Webpack and its plugins work smoothly together and lets you focus on application code.</p>

<p>A few years back I used to dread setting toolchains up, as it meant either a lot of hand coding and head scratching or trying to understand and strip code out of boilerplates. But in both cases usually ending up with compilation times slowing down a few weeks into development.</p>

<p>Luckily nowadays that’s mostly history with incremental builds, live browsers refresh, hot module replacement and state replays, without having to spend a lot of time manually piecing these together.</p>

<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.034.jpeg" alt="Slide 34" /></p>

<p>For dynamic content and data on the input side of these pipelines there are headless CMSs and hosted database APIs. What this means in practice is that website content writers can work on a nice visual editing interface and the content output can be accessed only via an API, making it a headless CMS.</p>

<p>This in contrast with the more monolithic CMSs responsible for rendering content in their on templates and locking you into their ways of doing things. Similarly, to store user generated data you can use something like Firebase and use the public content (like comments, uploads, and so on) as input in your static site. This way any time there’s a change either in your code or the data sources, you can trigger a rebuild using a web hook.</p>

<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.035.jpeg" alt="Slide 35" /></p>

<p>As the final part of my talk I would like to share a few cases studies with you.</p>

<p>A lot of you probably already read articles on Smashing Magazine, but in case not, it’s a big, international publishing company, mostly writing about front-end development.</p>

<p>A year or so ago they decided to replace their overstretched Wordpress back-end with a static website generator. They used Jekyll at first, then switched to Metalsmith to be able to use Handlebars templates which can also be rendered on the front-end.</p>

<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.036.jpeg" alt="Slide 36" /></p>

<p>They have a fair amount of content, so using static compilation out of the box meant that the linearly increasing compilation time spiralled to 2 hours for each change which of course wasn’t very useful.</p>

<p>Moving on to using incremental builds (mostly by making sure to only process images if they actually changed by comparing timestamps) and splitting content per language, they managed to go down to 2-5 minutes builds depending on the number of images added.</p>

<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.037.jpeg" alt="Slide 37" /></p>

<p>In developing countries like India, where devices are increasingly catching up in processing power and having modern browsers, but storage space is still precious and networks are a bit patchy, the impact of progressive web apps with offline capabilities and are much more important.</p>

<p>So Twitter set out to write a lightweight web client as an alternative to their downloadable apps.</p>

<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.038.jpeg" alt="Slide 38" /></p>

<p>Since Twitter is far from being static content and the feed is tailored to each user, they had to put in place a small Node service for initial server side rendering.</p>

<p>But the browser application itself is making full use of PWA features and CDN based asset delivery, so they managed to offer a great experience while cutting costs by an order of magnitude.</p>

<p>I honestly see no reason why they couldn’t use a lot of this on the desktop site too, so curious to see when will they make the jump,</p>

<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.039.jpeg" alt="Slide 39" /></p>

<p>And finally as a full stack example, there’s a service called A Cloud Guru.</p>

<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.040.jpeg" alt="Slide 40" /></p>

<p>They offer AWS courses, quizzes, certifications, forums, user profiles, payments and so on, just like any other similar business.</p>

<p>But what started as an experiment for them became a principle: they don’t use a single server of their own.</p>

<p>They have a lot of interesting articles on their Medium blog about the journey, but what was the most interesting part for me is that despite being AWS specialists, they have very little of their own services running in Lambda. Instead, working with a more servicefull ethos by using existing services, they found that they could focus on their own application and at the same time became part of multiple communities, spreading the money and love around instead of relying on just one big cloud provider.</p>

<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.041.jpeg" alt="Slide 41" /></p>

<p>As you could see there are a lot of different ways to put this approach into use and methods you can deploy independently, so the one big thing I’d like to leave with you is: When designing your service architecture, ask yourself the question if you really need to have a server running somewhere.</p>

<p>And of course there are many perfectly valid reasons to have them, on the current project I’m on we’re actually developing an API and some transactional pages with Ruby on Rails, as the service is for a children’s hospital with plans to roll out throughout the NHS, we didn’t want to freak them out with something they’d struggle to find maintainers for or would have concerns around data we can’t answer – that said, the hospital employee interface is going to be a PWA which uses Rails as an API only!</p>

<p>But as a father of two, I can assure you that while bringing your own babies into existence is for sure an exhilarating thing (especially in the conception stage), but the responsibility of looking after them is going to stick, so you have to be careful with how many can you comfortably handle.</p>

<p><img src="http://danieldemmel.me/images/posts/Give%20app%20servers%20a%20REST.042.jpeg" alt="Slide 42" /></p>

<p>Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why and how Github should have binary diffs]]></title>
    <link href="http://danieldemmel.me/blog/2015/11/28/why_and_how_github_should_have_binary_diffs/"/>
    <updated>2015-11-28T13:08:00+00:00</updated>
    <id>http://danieldemmel.me/blog/2015/11/28/why_and_how_github_should_have_binary_diffs</id>
    <content type="html"><![CDATA[<p>While git and Github brought tremendous improvement to how people can manage changes and collaborate on their software and simple textual content, most people still work with various binary formats and could benefit greatly from a similar boost in the way they work.</p>

<p>This effort would not only make Github much more useful by making binary file comparison possible, but also contribute hugely to efforts like the semantic web by compiling a library of the best open source parsers (similar to <a href="https://github.com/github/linguist">Linguist</a> for code) which can be used by anyone to analyse binary files.</p>

<p>Of course crunching through massive files would be very costly, but depending on complexity and usefulness each format could be processed to a various degree.</p>

<h2>1. Gather metadata</h2>

<p>As a first step only metadata would be extracted from the file. This would give a high level idea of what changed, making it possible for people to do quick sanity checks whether the changes look right.</p>

<p>Examples:</p>

<ul>
<li>Audio files (MP3, WAV, FLAC, etc): length, artist, title, album art, etc</li>
<li>Videos (MP4, WebM, MKV, etc): length, resolution, encoding, etc</li>
<li>Documents (DOC, DOCX, PDF, etc): number of pages, author, etc</li>
<li>Archives (ZIP, TAR, RAR, etc): file and folder structure, etc</li>
</ul>


<h2>2. Sample binary data</h2>

<p>As a next step a small sample of the binary data could be taken, giving a glimpse into the contents of the file.</p>

<p>Examples:</p>

<ul>
<li>Audio files: waveform of the first few seconds</li>
<li>Videos: a few frames</li>
<li>Documents: a couple of pages </li>
</ul>


<h2>3. Fully analyse binary data</h2>

<p>As the final step the full binary data would be analysed to enable deep understanding and comparison of content, with some error and inconsistency checks thrown in just for good measure.</p>

<p>Examples:</p>

<ul>
<li>Audio files: playable waveform diffs highlighting changes</li>
<li>Videos: comparison graph and clips of changed sections</li>
<li>Documents: textual and visual diffs of changes in various pages</li>
</ul>


<hr />

<p>Since Github is <a href="https://github.com/blog/1986-announcing-git-large-file-storage-lfs">already working on large file support</a>, this could be a very interesting complementary service, rolled out similarly to a small number of users and file formats first.</p>

<p>This might also mean improving the diff UI to accommodate for these richer comparisons which could also benefit code, but I’ll leave that for another post. Suffice to say that pull requests should be much more suited to (near) real-time collaboration, and not just on code. And that using semantic understanding to go beyond a simple text diff should be used for visualisation (and the tools are actually already available for code via the syntax definitions in Linguist used only for code colouring).</p>

<p>It’s difficult to foresee what kind of possibilities these would bring, but I think they could have to potential to bring open, global collaboration to a lot of new fields like design, engineering, music, etc.</p>

<p>Also it feels the time is getting right for this, with technologies like containers which enable using (often compiled) tools for processing these binary files with much less hassle when it comes to setting environments up with all dependencies installed. If you thought Docker is only for deploying web services, <a href="https://blog.jessfraz.com/post/docker-containers-on-the-desktop/">think again</a>.</p>

<p>And maybe, just maybe, this could pave the way for programming to move beyond text? I can see <a href="http://worrydream.com/#!/dbx">Bret Victor nodding in the background</a>&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finding an affordable electric family cargo bike in London]]></title>
    <link href="http://danieldemmel.me/blog/2015/08/31/finding-an-affordable-electric-family-cargo-bike-in-london/"/>
    <updated>2015-08-31T13:13:00+01:00</updated>
    <id>http://danieldemmel.me/blog/2015/08/31/finding-an-affordable-electric-family-cargo-bike-in-london</id>
    <content type="html"><![CDATA[<h2>The problem of staying mobile with two (or more) children</h2>

<p>My second little one was one month old just the other day, so we started to talk about some ideas with my wife Ivana how will she be able to stay mobile when I go back to work. She has a hybrid bike now which was converted to electric to help her get around during this last pregnancy, but with the added weight of the motor and battery she won&#8217;t be able to also have two children plus all the stuff in the basket on the bike.</p>

<blockquote><p>The &#8220;normal&#8221; reaction at this point for most people would be to go and buy a family car, but unless you live in a remote countryside location it only makes sense to drive if you&#8217;re disabled or if you&#8217;re a conservative politician.</p></blockquote>

<p>Not for us though, especially after having lived for a while in Amsterdam, where people just get a cargo bike (bakfiets) instead. There are tons of brands to choose from (Bakfiets, Christiania Bikes, De Fietsfabriek, Nihola, Winther, Urban Arrow, WorkCycles, Dolly Bike, Cangoo, Yuba, etc etc and these are just the ones with family friendly models) if you live in an advanced cycling country like The Netherlands or Denmark, but here in the United Kingdom the options are a bit more limited and prices much more inflated – usually the same in pounds as they are in euros.</p>

<p>The bikes come in many different sizes and shapes, but since Ivana&#8217;s main concern with her current bike was stability, we instantly ruled the two wheeled versions out. The more solid box tricycles are a bit heavier though and living in Stamford Hill now there&#8217;s a bit of a hill to climb to go anywhere, so we also decided that having a trike with electric assist is a must.</p>

<h2>An e-trike it is then, but which one?</h2>

<p>With these in mind I set out to do some research which took a good few hours so I thought I should share it in case anyone else finds themselves in the same situation.</p>

<blockquote><p>Unfortunately a lot of these family cargo bikes cost thousands of pounds even without the electric motor, so our shortlist of the &#8220;best&#8221; is what you can get between £2000-£3000 once you include all the essentials like rain cover tent and so.</p></blockquote>

<p>There are some cheaper Chinese models, but since we don&#8217;t have a garage to protect the trike from the elements (or want to spend loads on maintenance) these wouldn&#8217;t be the best invesment on the long term.</p>

<p>So without further ado, here are the top 4 (the titles link to the official web sites). I won&#8217;t list detailed specs, but instead write up my impression and what I found out through some research and forum dig.</p>

<h2>The best ones in no particular order</h2>

<h3><a href="http://www.babboe.co.uk/cargo-bikes/babboe-big-e.html">Babboe Big-E</a></h3>

<p><a href="https://www.babboe.nl/media/babboe_electrisch_metaccu_kl.jpg" title="Open full size image"><img src="http://danieldemmel.me/images/posts/trike-babboe_big-e.jpg" alt="Credits: © Babboe" /></a></p>

<p>With a starting price of £1899 this is the cheapest of the lot. Babboe frames are designed in The Netherlands and made in China, the electric parts come from Taiwan, the wood is European, the Shimano gears are Japanese, the Magura brakes are German and finally the cargo bikes are assembled in The Netherlands. Some of the earlier models were getting some <a href="http://measured-response.com/bakfiets/?p=600">bad reputation</a> a few years ago, but it seems that the constructions has improved a lot and Babboe now offers an impressive 5 years warranty on the frame of the bikes. I also had the chance to see and ride a 4 years old model which was in fairly good shape given the age and the fact that it was used daily to haul heavy tools.</p>

<p>Quality concerns set aside, actually riding the bike didn&#8217;t feel that great. It was a bit difficult to keep it on course in (the admittedly quite bumpy) Bethnal Green Gardens park.</p>

<p>So all in all it didn&#8217;t seem to be an awful choice, but make sure to give it a ride before getting one.</p>

<h3><a href="http://boxercycles.com/product/shuttle/">Boxer E-shuttle</a></h3>

<p><a href="http://boxercycles.com/wp-content/uploads/2015/01/shuttle-shots-025.jpg" title="Open full size image"><img src="http://danieldemmel.me/images/posts/trike-shuttle-shots-025.jpg" alt="Credits: © Boxer" /></a></p>

<p><a href="http://boxercycles.com/wp-content/uploads/2015/01/bridge-close-up-e1433858462810.jpg" title="Open full size image"><img src="http://danieldemmel.me/images/posts/trike-boxer-bridge-close-up.jpg" alt="Credits: © Boxer" /></a></p>

<p><a href="http://boxercycles.com/wp-content/uploads/2015/01/IMG_44041.jpg" title="Open full size image"><img src="http://danieldemmel.me/images/posts/trike-shuttle-frame.jpg" alt="Credits: © Boxer" /></a></p>

<p>After a brief stint selling the brand <a href="http://www.veloelectrique.co.uk/">Velo Electrique</a> which were super affordable &#8220;upcycled&#8221; Chinese bikes (like the Velo Cargo E250 starting at £1455), British designer Jeremy Davies set up a locally made line of bikes under the moniker Boxer cycles. I actually had a good email exchange with him and the passion for quality shined through, which combined with his previous experience designing offshore power systems sounds really convincing.</p>

<p>The Shuttle itself looks really cool with the custom vinyl designs and the specs are also nice, like for example all around hydraulic disc brakes. It also comes with a rain tent which I think is an essential, after which it goes at £2880.</p>

<p>Unfortunately there isn&#8217;t a model readily available to be tried in London as of now (the nearest shop with one on hand is <a href="http://www.kidsandfamilycycles.co.uk/">Kids and Family Cycles</a> in Dorset), though Jeremy was very accomodating by offering to go out of his way meeting up while doing a delivery near London. If you are any of the London bike shop people reading this, please get at least one in stock for trials!</p>

<h3><a href="http://www.babboe.co.uk/cargo-bikes/babboe-curve-e.html">Babboe Curve-E</a></h3>

<p><a href="http://www.digilife.nl/lammers/2014/09/28/getest-de-elektrische-babboe-curve-bakfiets/" title="Open blog post"><img src="http://danieldemmel.me/images/posts/trike-curve1.jpg" alt="Credits: © Peter Lammers and/or Corine Lammers" /></a></p>

<p><a href="http://www.digilife.nl/lammers/2014/09/28/getest-de-elektrische-babboe-curve-bakfiets/" title="Open blog post"><img src="http://danieldemmel.me/images/posts/trike-curve2.jpg" alt="Credits: © Peter Lammers and/or Corine Lammers" /></a></p>

<p><a href="http://www.digilife.nl/lammers/2014/09/28/getest-de-elektrische-babboe-curve-bakfiets/" title="Open blog post"><img src="http://danieldemmel.me/images/posts/trike-curve3.jpg" alt="Credits: © Peter Lammers and/or Corine Lammers" /></a></p>

<p>Being £300 more than the Big-E, the Curve-E starts at £2199. Looking only at the spec sheets the differences between the two models are minor. Nicer brakes, beefier motor, fancier finish, that&#8217;s about it.</p>

<p>Sitting on the bike and riding around a bit the difference starts to shine through, even though the actual model we tried was a standard one without electric motor, it handled better and felt nicer to ride than the Big-E. Despite my initial skepticism towards Babboe, riding on this new model made me a convert so we ordered one right after trying it.</p>

<p>Expect a follow-up post in a few months!</p>

<h3><a href="http://www.christianiabikes.com/en/addition/e-bike/">Christiania Light &#8220;Green power&#8221;</a></h3>

<p><a href="http://www.christianiabikes.com/wp-content/uploads/2013/01/light_med_motor-550x407@2x.jpg" title="Open full size image"><img src="http://danieldemmel.me/images/posts/trike-christiania.jpg" alt="Credits: © Christiania" /></a></p>

<p>I haven&#8217;t done too much research on this particular bike, but looking at the <a href="http://www.juizz.nl/bakfietsen">Dutch electric bike specialist Juizz</a> it seemed to be the next cheapest option up from the Babboes and Christiania one of the &#8220;classic&#8221; cargo bike brands made in Denmark, so definitely one to try and look into.</p>

<h2>So how do I try and decide?</h2>

<p>We were really lucky to have found an <a href="http://www.babboe.co.uk/open-day">open day</a> nearby in Bethnal Green. The two chaps from <a href="http://www.bikeworks.org.uk">BikeWorks</a> were really friendly and helpful, answering a lot of our questions. So the fact that BikeWorks is actually</p>

<ol>
<li>a really cool social enterprise supporting and teaching people from disadvantaged backgrounds,</li>
<li>the place where we got Ivana&#8217;s current bike which was a great buy and still going strong,</li>
<li>they throw in a free rain tent (worth £120) if you order your Babboe at the trial event,</li>
</ol>


<p>made me get the bike through them right then and there.</p>

<p>But anyway, it&#8217;s very difficult to decide purely from specs and reviews whether for example you prefer indirect or direct steering (Babboes are former, Shuttle and Christiania the latter), so make absolutely sure that you try at least a couple of different brands and models.</p>

<p>As well as BikeWorks, another good place to go and check bikes out at is <a href="http://www.londongreencycles.co.uk/">London Green Cycles</a>, which is a shop next to Regent&#8217;s Park with a big selection. Slightly annoyingly though they don&#8217;t have prices for any of the electric models on their website, if you&#8217;re the owner reading this please do put them up there.</p>

<p>If you want to do some further research yourself, the German website <a href="http://www.nutzrad.de/index.php?seite=kat">Nutzrad</a> has a massive catalogue of different bikes which is a good starting point.</p>

<p>Or if you&#8217;re in Hackney / East London, drop me a message and come around to try ours in a couple of weeks :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Indiewebify yourself]]></title>
    <link href="http://danieldemmel.me/blog/2015/08/16/indiewebify-yourself/"/>
    <updated>2015-08-16T12:11:00+01:00</updated>
    <id>http://danieldemmel.me/blog/2015/08/16/indiewebify-yourself</id>
    <content type="html"><![CDATA[<h2>The web should be open and it needs you</h2>

<p>I recently spotted a reference about the <a href="http://indiewebcamp.com/">Indie Web Camp</a> somewhere – most likely on Twitter – and reading a bit about it I was immediately sold on the idea and principles.</p>

<p>The core principle is to take the control back from silos, or the walled gardens of the Web and make it personal and open again. Which is all very well and something I agree with, but I just didn&#8217;t really know what are the small, incremental actions I can take to get there.</p>

<p>The Semantic web, microformats and taking content back have been in the back of my mind, but reading standard drafts or mulling about what&#8217;s the point of a social network without people never sounded like good starting points.</p>

<h2>Now it&#8217;s easy to get started</h2>

<p>So it was very refreshing to see simple to do and practical guides to get my personal website and blog up to speed with a couple of simple class names and missing metadata additions. What I found particularly useful and fun to get started with is the <a href="http://indiewebcamp.com/IndieMark">Indiemark</a> checklist and easy to use validators on <a href="http://indiewebify.me/">IndieWebify.me</a> for things like the <code>rel=me</code> links to other web profiles, home page <code>h-card</code> indenty and <code>h-entry</code> markup for blog posts.</p>

<p>So far I got everything in mark 1 done which was fairly easy with my static, Jekyll / Octopress based website mostly just by adding some classes to existing markup and restructuring it here and there, but level 2 has some more challenging requirements, especially with creating some nice automatic way to cross-post <a href="http://indiewebcamp.com/notes">notes</a> to Twitter. I&#8217;ll update this post once I have these figured out, I&#8217;ll either need to find or create some small libraries to help with this.</p>

<h2>But why bother?</h2>

<p>Cluetrain&#8217;s <a href="http://cluetrain.com/newclues/">New Clues</a> give some answers which are much nicer formulated than how I could put it:</p>

<blockquote><p>(77). Non-neutral applications built on top of the neutral Net are becoming as inescapable as the pull of a black hole.</p>

<p>(78). If Facebook is your experience of the Net, then you’ve strapped on goggles from a company with a fiduciary responsibility to keep you from ever taking the goggles off.</p>

<p>(79). Google, Amazon, Facebook, Apple are all in the goggles business. The biggest truth their goggles obscure: These companies want to hold us the way black holes hold light.</p>

<p>(80). These corporate singularities are dangerous not because they are evil. Many of them in fact engage in quite remarkably civic behavior. They should be applauded for that.</p>

<p>(81). But they benefit from the gravity of sociality: The “network effect” is that thing where lots of people use something because lots of people use it.</p>

<p>(82). Where there aren’t competitive alternatives, we need to be hypervigilant to remind these Titans of the Valley of the webby values that first inspired them.</p>

<p>(83). And then we need to honor the sound we make when any of us bravely pulls away from them. It’s something between the noise of a rocket leaving the launchpad and the rip of Velcro as you undo a too-tight garment.</p></blockquote>

<p>Worths reading the rest of the points too if you care about the Web in any way!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Containerise everything]]></title>
    <link href="http://danieldemmel.me/blog/2015/08/14/containerise-everything/"/>
    <updated>2015-08-14T09:11:00+01:00</updated>
    <id>http://danieldemmel.me/blog/2015/08/14/containerise-everything</id>
    <content type="html"><![CDATA[<h2>Why you should stop installing development environment locally</h2>

<p>This is a placeholder post for my talk about containers / Docker from <a href="http://redevelop.io">re:develop conference</a> 2015 conference in Bournemouth. I&#8217;ll eventually write up the main points in a proper blog post form, but for now have a look at the embedded slides and video recording.</p>

<hr />

<h3>Video</h3>

<div class="video-container">
  <iframe src="https://player.vimeo.com/video/136610729?color=c9ff23" width="500" height="281" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
</div>


<p><a href="https://vimeo.com/136610729">Daniel Demmel at re:develop 2015 - Containerise everything</a> from <a href="https://vimeo.com/wearebase">Base</a> on <a href="https://vimeo.com">Vimeo</a></p>

<h3>Slides</h3>

<script async class="speakerdeck-embed" data-id="8e12ea8c3f29422380c11514497bfefd" data-ratio="1.77777777777778" src="http://danieldemmel.me//speakerdeck.com/assets/embed.js"></script>


<h3>Code</h3>

<p>Make sure to also have a look at the <a href="https://github.com/ustwo/docker-node-boilerplate">companion repository on Github</a>, which shows how to set up a Node based development environment with Docker. Of course it would work with anything else which runs on Linux, but this simple working example should give you a good starting point.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why YOU — not Henry Ford — should design your working life]]></title>
    <link href="http://danieldemmel.me/blog/2014/04/13/why-you-not-henry-ford-should-design-your-working-life/"/>
    <updated>2014-04-13T19:11:00+01:00</updated>
    <id>http://danieldemmel.me/blog/2014/04/13/why-you-not-henry-ford-should-design-your-working-life</id>
    <content type="html"><![CDATA[<h2>Your life was designed 150 years ago</h2>

<p>Western middle-class living operates on a working pattern <a href="https://en.wikipedia.org/wiki/Eight-hour_day">invented in the 19th century</a>, grudgingly accepted by progressive capitalists like Henry Ford in the beginning of 20th century and finally written into law early to mid-20th century in most countries.</p>

<p>While certainly a lot of people realise this might not be ideal, just why are we — as global society — so timid about changing this pattern?</p>

<h2>First world problems</h2>

<p>Much of my argument doesn&#8217;t apply if you&#8217;re struggling with low pay, shift-based work or live in a developing country. But many of you reading this post will be fortunate enough to be getting paid to think about and solve problems in creative ways. Yet we know that our brains are incapable of working at their peak, for hours in a row, while our bodies are tied to a desk and our colleagues are buzzing around us.</p>

<blockquote><p>Chances are that you also earn more than what you <strong>really need</strong>, to spend the surplus on stuff you <strong>want but don&#8217;t need</strong> or have the time to enjoy anyway.</p></blockquote>

<p>Funnily, some of the nicest things which you <em>do actually</em> <em>need</em> and <a href="https://medium.com/@kidbombay/how-to-be-happy-be8b2dc0677">can really make you happy</a> <a href="http://time.com/3950042/things-make-you-happier/">(as science shows)</a> don&#8217;t cost a lot of money: taking a walk in nature, relaxing with people you like, cooking some fresh food from scratch, giving time to enjoy the meal together with your family and friends immersed in conversations, or keeping a gratitude journal.</p>

<p>So why do we still choose to join the rush hour congestion every day, and with that, collectively invest in expensive and destructive infrastructure developments just to serve these one-hour time windows? Or, why do we create a binary choice between unemployment and low paid jobs or burning out with no time to rest in sight until we retire, being too old and ill to enjoy it?</p>

<h2>Is it about co-location then?</h2>

<p>Yes, being next to teammates and interacting in person is something which can&#8217;t (fully, yet) be replaced by telecommunication, but do or should we have meetings all day with the same people?</p>

<blockquote><p>Couldn&#8217;t we organise our discussions a bit smarter into clusters — both within a day and a week — and spend the rest of the time away from the hustle of the workspace, with space to think when we need it the most?</p></blockquote>

<p>Wouldn&#8217;t we still have enough chance for serendipitous conversation between colleagues from other parts of the company if only we made sure to spend our lunch time and coffee or tea breaks in the communal area rather than in front of our computers?</p>

<h2>Planet, people and economy</h2>

<p>What really changed my way of thinking about time is a brilliant and provocative study by the New Economics Foundation, called <a href="http://www.neweconomics.org/publications/entry/21-hours">21 hours</a> (as in work week). In this paper they argue that by shortening our time spent at work we could decrease overconsumption, stress, and traffic congestion while increasing the number people employed in quality jobs, community and political involvement, and general mental and physical wellbeing.</p>

<blockquote><p>Once you stop looking at life as a treadmill of 5 long working days and a short weekend — barely enough to gasp for breath —and give yourself permission to explore what else is possible, magic starts to happen in your mind.</p></blockquote>

<p>If you want a second opinion or to dig deeper, also take a look at the Institute for the Future&#8217;s <a href="http://www.iftf.org/our-work/people-technology/technology-horizons/the-future-of-work/">Future of Work study</a>.</p>

<p><a href="http://danieldemmel.me/images/posts/TH-FutureofWork.png" title="Open full size image"><img src="http://danieldemmel.me/images/posts/TH-FutureofWork.png" title="Open full size image" alt="Credits: © 2015 Institute for the Future | http://www.iftf.org/our-work/people-technology/technology-horizons/the-future-of-work/" /></a></p>

<h2>So what do I do?</h2>

<p>It&#8217;s all very well, I hear you say, but we can&#8217;t all just move to France with their leisurely work hours, can we? Well, as an example there&#8217;s a <a href="https://www.gov.uk/flexible-working">law in the UK</a> that allows you to ask for any form of flexible work arrangement and unless your employer has a very good reason why they can&#8217;t accommodate for your request — which is unlikely for an office job — you should be allowed to have your way.</p>

<p>So this is exactly what I did, about a year and a half ago, just after my son was born.</p>

<blockquote><p>My pattern is every Wednesday off with and an extra hour worked each day for the rest of the week. While first I thought about getting a long weekend, slicing the week into half and not having to work more than two days in a row — ever! — works incredibly well.</p></blockquote>

<p>To make this happen I had to sacrifice 10% of my salary which might sound a bit off-putting at first, but if you think of it this way: you&#8217;re giving up the highest taxed bit first, or you could also just decrease hours with the same percentage instead of a pay rise next time, suddenly it hurts much less.</p>

<h2>Power to the parents</h2>

<p>Apart from the decreased normal working pattern, I&#8217;m lucky enough to work for ustwo with a progressive paternity policy, enabling fathers to take over maternity time from mother and topping up the statutory pay to full salary.</p>

<p>I can&#8217;t even begin to describe how wonderful it was for me to be able to spend 2 months during last summer with my little boy, but having some discussions with a few colleagues I realised that this paternal time off has profound implications beyond a healthier, more balanced child and less stressed young mother — if these weren&#8217;t enough already!</p>

<blockquote><p>If men also take months off after a child has been born — and in general share looking after the little ones — the ridiculous and often subconscious stigma of mothers as &#8220;less dedicated&#8221; workers will all but disappear.</p></blockquote>

<p>Needless to say I was more than happy to bask in the glory of a gender equality champion after this realisation, but this is just a small step to close the gap for a more inclusive workplace. For me personally that is, I can&#8217;t feel grateful enough for this forward looking and generous policy!</p>

<h2>Time to design your life</h2>

<p>There&#8217;s no ultimate recommendation as everyone&#8217;s different, but you should give yourself time and space to think about what would be the best working pattern for you and what matters the most to you in life by filling in <a href="http://iwtmad.files.wordpress.com/2012/12/the-living-legacy-workbook6.pdf">The Living Legacy workbook (PDF)</a>. As part of this you should realise that it&#8217;s not a lack of dedication to your career at all to find the way to sustainably give your best instead of burning yourself out!</p>

<hr />

<p>This post was originally published on the ustwo blog: <a href="http://ustwo.com/blog/you-should-design-your-working-life/">http://ustwo.com/blog/you-should-design-your-working-life/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build your Minimum Viable Product]]></title>
    <link href="http://danieldemmel.me/blog/2014/01/19/build-your-minimum-viable-product/"/>
    <updated>2014-01-19T01:27:00+00:00</updated>
    <id>http://danieldemmel.me/blog/2014/01/19/build-your-minimum-viable-product</id>
    <content type="html"><![CDATA[<p>I gave a talk about building and iterating an MVP at the brilliant Workplace Hackshop organised by <a href="http://www.hackhumanity.org/">HackHumanity</a>.</p>

<p>It&#8217;s a short presentation so take a look, but these are the just the main points for the busiest executives:</p>

<ul>
<li>Form key hypotheses – optimise for learning, not functionality</li>
<li>Express your main value proposition</li>
<li>Get it out – if you’re not ashamed of it you wasted time</li>
<li>Measure every user interaction</li>
<li>Know where your audience hangs out</li>
<li>Look for customers ready to pay</li>
<li>Fake it, kludge it, hack it together</li>
</ul>


<hr />

<script async class="speakerdeck-embed" data-id="a48d1b7062080131f8545aa390b2a9d4" data-ratio="1.62025316455696" src="http://danieldemmel.me//speakerdeck.com/assets/embed.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An introduction to jQuery Deferred / Promise and the design pattern in general]]></title>
    <link href="http://danieldemmel.me/blog/2013/03/22/an-introduction-to-jquery-deferred-slash-promise/"/>
    <updated>2013-03-22T10:42:00+00:00</updated>
    <id>http://danieldemmel.me/blog/2013/03/22/an-introduction-to-jquery-deferred-slash-promise</id>
    <content type="html"><![CDATA[<p>Update 2 (2015/10/23) I realised I should really put an update on this post, at this point you should really not use Deferred and instead of jQuery or any other 3rd party library just start relying on the native ES6 / ES2015 Promise – unless you need some advanced functionality, in which case try something like <a href="https://github.com/petkaantonov/bluebird">Bluebird</a>.</p>

<p>For a more up to date introduction to Promises, check out <a href="http://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html">this post on the PouchDB blog</a>.</p>

<hr />

<p>I gave an introductory talk a while back at the <a href="http://www.meetup.com/londonajax/events/100830572/">London Ajax User Group</a> about jQuery Promises after which there was a lively debate, so I thought it would be great to post the content of the slides with some notes as a sort of tutorial.</p>

<p>Update (2012/09/01): As it turns out there was a nice video recorded of the talk, if you have 10 minutes free give it a watch!</p>

<div class="video-container">
  <iframe src="http://danieldemmel.me//player.vimeo.com/video/73539595?color=c9ff23" width="400" height="300" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe> <p><a href="http://vimeo.com/73539595">Introduction to jQuery Promises / Deferreds - London Ajax User Group 12.02.2013.</a> from <a href="http://vimeo.com/daaain">Daniel Demmel</a> on <a href="https://vimeo.com">Vimeo</a>.</p>
</div>


<p>The original presentation is on Github (made with <a href="https://github.com/infews/keydown">Keydown</a> as presentation engine which doesn&#8217;t seem to handle resizing well enough to be embeddable): <a href="http://daaain.github.com/jquery-deferred-intro/jquery-deferred-intro/slides.html">daaain.github.com/jquery-deferred-intro/jquery-deferred-intro/slides.html</a></p>

<h2>A simple CORS AJAX example</h2>

<p>As a simple scenario to optimise I set up a not very useful example of loading 2 articles from HTML5Rocks and showing the first sections of each.</p>

<iframe width="100%" height="300" src="http://jsfiddle.net/dain/87uPV/3/embedded/result" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<h2>So in which cases are Promises useful?</h2>

<h3>AJAX request handler spaghetti</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;GET&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;http://www.html5rocks.com/en/tutorials/file/xhr2/&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">insertDiv1</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div&gt;&lt;/div&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">insertDiv1</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nx">response</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;section&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">());</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;GET&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;http://www.html5rocks.com/en/tutorials/audio/scheduling/&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">insertDiv2</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div&gt;&lt;/div&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">insertDiv2</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nx">response</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;section&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">());</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">insertDiv1</span><span class="p">,</span> <span class="s1">&#39;&lt;hr/&gt;&#39;</span><span class="p">,</span> <span class="nx">insertDiv2</span><span class="p">);</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Timing issues (DOM ready, animations, etc)</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;GET&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;http://www.html5rocks.com/en/tutorials/file/xhr2/&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">insertDiv1</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div&gt;&lt;/div&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">insertDiv1</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nx">response</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;section&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">());</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;GET&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;http://www.html5rocks.com/en/tutorials/audio/scheduling/&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">insertDiv2</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div&gt;&lt;/div&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">insertDiv2</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nx">response</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;section&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">());</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">insertDiv1</span><span class="p">,</span> <span class="s1">&#39;&lt;hr/&gt;&#39;</span><span class="p">,</span> <span class="nx">insertDiv2</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>But what are these Deferreds and Promises really?</h2>

<h3>Deferred</h3>

<ul>
<li>A proxy for an asynchronous, future event</li>
<li>Has an interface for getting <code>resolve()</code>d or <code>reject()</code>ed</li>
<li>Starts in <code>pending</code> state, can only be finished once</li>
<li>Calls listeners immediately (but always async) once resolved</li>
</ul>


<h3>Promise</h3>

<ul>
<li>Allows listening and state inspection (using <code>state()</code>), but completely immutable so no interface for resolution</li>
<li>Basic (jQuery specific) listeners are <code>done()</code> and <code>fail()</code></li>
<li>Can be chained with <code>then()</code> (used to be <code>pipe()</code>)</li>
<li>Can be grouped and processed using <code>$.when()</code></li>
</ul>


<h2>How do they work?</h2>

<h3>A canonical Deferred example</h3>

<p>Setting up a listener and triggering it with resolve:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">deferred</span><span class="p">.</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">alert</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="s2">&quot;hello world&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This also works as it doesn&#8217;t matter if a Deferred is already resolved it will still trigger the callback we attach to it:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="s2">&quot;hello world&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">deferred</span><span class="p">.</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">alert</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>A canonical Promise + When example</h3>

<p>Return a Promise from a method and attach a listener to it (can have more than one):</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">getPromise</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="s2">&quot;hurray&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span> <span class="nx">getPromise</span><span class="p">()</span> <span class="p">).</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">alert</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>So let&#8217;s untangle our example</h3>

<p>Create a Promise for DOM ready and the two AJAX requests and wait for all of them to be fulfilled:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">getReady</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">deferredReady</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">deferredReady</span><span class="p">.</span><span class="nx">resolve</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">deferredReady</span><span class="p">.</span><span class="nx">promise</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">firstRequest</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span> <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;http://www.html5rocks.com/en/tutorials/file/xhr2/&#39;</span> <span class="p">}),</span>
</span><span class='line'>    <span class="nx">secondRequest</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span> <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;http://www.html5rocks.com/en/tutorials/audio/scheduling/&#39;</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span> <span class="nx">getReady</span><span class="p">(),</span> <span class="nx">firstRequest</span><span class="p">,</span> <span class="nx">secondRequest</span>
</span><span class='line'><span class="p">).</span><span class="nx">done</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">readyResponse</span><span class="p">,</span> <span class="nx">firstResponse</span><span class="p">,</span> <span class="nx">secondResponse</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">insertDiv1</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div&gt;&lt;/div&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">insertDiv1</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nx">firstResponse</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;section&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">());</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">insertDiv2</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div&gt;&lt;/div&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">insertDiv2</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nx">secondResponse</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;section&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">());</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">insertDiv1</span><span class="p">,</span> <span class="s1">&#39;&lt;hr/&gt;&#39;</span><span class="p">,</span> <span class="nx">insertDiv2</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Another solution</h3>

<p>The AJAX request can be already fired off while we wait for the DOM (also showing how can we chain listeners with <code>then()</code>):</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">getReady</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">deferredReady</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">deferredReady</span><span class="p">.</span><span class="nx">resolve</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">deferredReady</span><span class="p">.</span><span class="nx">promise</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">firstRequest</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span> <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;http://www.html5rocks.com/en/tutorials/file/xhr2/&#39;</span> <span class="p">}),</span>
</span><span class='line'>    <span class="nx">secondRequest</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span> <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;http://www.html5rocks.com/en/tutorials/audio/scheduling/&#39;</span> <span class="p">}),</span>
</span><span class='line'>    <span class="nx">firstDiv</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">secondDiv</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span> <span class="nx">firstRequest</span><span class="p">,</span> <span class="nx">secondRequest</span>
</span><span class='line'><span class="p">).</span><span class="nx">then</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">firstResponse</span><span class="p">,</span> <span class="nx">secondResponse</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">firstDiv</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div&gt;&lt;/div&gt;&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nx">firstResponse</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;section&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">());</span>
</span><span class='line'>  <span class="nx">secondDiv</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div&gt;&lt;/div&gt;&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nx">secondResponse</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;section&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">());</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">getReady</span><span class="p">();</span>
</span><span class='line'><span class="p">}).</span><span class="nx">done</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">readyResponse</span><span class="p">,</span> <span class="nx">firstResponse</span><span class="p">,</span> <span class="nx">secondResponse</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">firstDiv</span><span class="p">,</span> <span class="s1">&#39;&lt;hr/&gt;&#39;</span><span class="p">,</span> <span class="nx">secondDiv</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Dealing with rejection</h2>

<p>When a Promise gets <code>reject()</code>ed it will immediately cascade down the <code>then()</code> chain so you only need to handle it at the end (with jQuery it&#8217;s only since 1.8+ though).</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>getTweetsFor("domenic") // promise-returning function
</span><span class='line'>  .then(function (tweets) {
</span><span class='line'>    var shortUrls = parseTweetsForUrls(tweets);
</span><span class='line'>    var mostRecentShortUrl = shortUrls[0];
</span><span class='line'>    return expandUrlUsingTwitterApi(mostRecentShortUrl); // promise-returning function
</span><span class='line'>  })
</span><span class='line'>  .then(httpGet) // promise-returning function
</span><span class='line'>  .then(
</span><span class='line'>    function (responseBody) {
</span><span class='line'>      console.log("Most recent link text:", responseBody);
</span><span class='line'>    },
</span><span class='line'>    function (error) {
</span><span class='line'>      console.error("Error with the twitterverse:", error);
</span><span class='line'>    }
</span><span class='line'>  );</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;ve taken this example from <a href="http://domenic.me/2012/10/14/youre-missing-the-point-of-promises/">Domenic Denicola&#8217;s blog post &#8220;You&#8217;re Missing the Point of Promises&#8221;</a> which is a great next step on the path of understanding Promises and asynchronous control flows. Go and read it now!</p>

<h2>A few more pointers</h2>

<ul>
<li>In case there&#8217;s a long request you can send updates to a <code>progress()</code> listener using <code>notify()</code></li>
<li>You can insert transformations into the <code>then()</code> chain</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span> <span class="p">{</span> <span class="nx">testing</span><span class="o">:</span> <span class="mi">123</span> <span class="p">}</span> <span class="p">).</span><span class="nx">done</span><span class="p">(</span>
</span><span class='line'>  <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="nx">alert</span><span class="p">(</span><span class="nx">x</span><span class="p">.</span><span class="nx">testing</span><span class="p">);</span> <span class="p">}</span> <span class="cm">/* alerts &quot;123&quot; */</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>And finally it must be said that jQuery Deferred is by far not the only one, see <a href="http://wiki.commonjs.org/wiki/Promises/A">Promises/A spec</a> and the clarified <a href="http://promises-aplus.github.com/promises-spec/">Promises/A+ spec</a>. If you&#8217;re not already using jQuery then <a href="https://github.com/kriskowal/q">Q</a>, <a href="https://github.com/tildeio/rsvp.js">rsvp.js</a> or <a href="https://github.com/cujojs/when">when</a> might be better alternatives with seamless interoperability due to stricter adherence to the CommonJS specs.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Loading Javascript / CSS files from Jammit's assets.yml with Jasmine Gem to avoid duplication]]></title>
    <link href="http://danieldemmel.me/blog/2013/01/29/loading-javascript-source-files-from-jammits-assets-dot-yml-with-jasmine-gem/"/>
    <updated>2013-01-29T18:33:00+00:00</updated>
    <id>http://danieldemmel.me/blog/2013/01/29/loading-javascript-source-files-from-jammits-assets-dot-yml-with-jasmine-gem</id>
    <content type="html"><![CDATA[<p>Got a really handy bit of script working today, but it took me some time to figure out so thought I should post it.</p>

<p>Using the latest Jasmine Gem (only on Github master as of 2013/01/29) you just need to create <code>spec/javascripts/support/jasmine_helper.rb</code> and drop this in there (note that <code>jasmine_helper.rb</code> takes the responsibility of custom configs over from <code>jasmine_config.rb</code> from now on!):</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>require 'yaml'
</span><span class='line'>require 'erb'
</span><span class='line'>
</span><span class='line'>Jasmine.configure do |config|
</span><span class='line'>  jammitYaml = YAML.load(ERB.new(File.read('config/assets.yml')).result)
</span><span class='line'>  config.src_files = lambda { Jasmine::PathExpander.expand(config.src_dir, jammitYaml['javascripts']['workspace']) }
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>What it does is to load <code>assets.yml</code>, parse the YAML array <code>javascripts: workspace:</code>, uses Jasmine&#8217;s <code>PathExpander.expand</code> method to actually glob the files from the paths listed there and finally wraps the whole thing into a lambda so that it acts as a method.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Cross-origin resource sharing with complex jQuery AJAX requests]]></title>
    <link href="http://danieldemmel.me/blog/2013/01/18/getting-cross-origin-resource-sharing-with-complex-jquery-ajax-requests/"/>
    <updated>2013-01-18T17:44:00+00:00</updated>
    <id>http://danieldemmel.me/blog/2013/01/18/getting-cross-origin-resource-sharing-with-complex-jquery-ajax-requests</id>
    <content type="html"><![CDATA[<p>I&#8217;m working on an HTML5 desktop application which needs to load some HTML text from a server, but not through an existing API. So I had to find a solution which can be set up without too much backend work and make it possible for non-technical people to easily update the content. I&#8217;m assuming that the easiest setup will be using an existing CMS system with a few custom server settings to enable cross-domain communication. It&#8217;s also a security sensitive application, so the content will need to be protected with basic authorisation at least.</p>

<p>Well, let me get things straight: CORS which is more than the simplest GET request is not easy!</p>

<p>While trying to set up and end to end proof of concept to make sure this will work and to be able to advise with setup I ran into several blockers, so I&#8217;m going to go through them step by step.</p>

<h2>Setting up the jQuery AJAX request</h2>

<p>For simple use cases all you need to do to is fire off a simple GET request:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$.ajax({
</span><span class='line'>  type: 'GET',
</span><span class='line'>  url: 'http://www.html5rocks.com/en/tutorials/file/xhr2/',
</span><span class='line'>  success: function(response) {
</span><span class='line'>      var article = $(response).find('article').html();
</span><span class='line'>      $('body').html(article);
</span><span class='line'>  }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>If the server you&#8217;re hitting is sending back the header <code>Access-Control-Allow-Origin</code> with the value <code>*</code> you&#8217;re all set:</p>

<p><a class="jsbin-embed" href="http://jsbin.com/atobin/1/embed?live,javascript">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>

<p>However what I ended up with is far more complicated, as doing anything with custom headers (which included authorisation) you have to first make a so called <a href="http://www.html5rocks.com/en/tutorials/cors/#toc-handling-a-not-so-simple-request">preflight</a> request. This is an OPTIONS request which only asks the server if it supports all the headers needed for the &#8216;real&#8217; request which follows.</p>

<p>So let&#8217;s first see the full AJAX request:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$.ajax({
</span><span class='line'>  type: 'GET',
</span><span class='line'>  url: 'http://www.mydomain.com/myFancyContent.php',
</span><span class='line'>  headers: {
</span><span class='line'>      'MyCustomHeader': 'important information'
</span><span class='line'>  },
</span><span class='line'>  xhrFields: {
</span><span class='line'>      withCredentials: true
</span><span class='line'>  },
</span><span class='line'>  username: 'myuser',
</span><span class='line'>  password: 'mypassword',
</span><span class='line'>  success: function() {
</span><span class='line'>      console.log('success');
</span><span class='line'>  },
</span><span class='line'>  error: function() {
</span><span class='line'>      console.log('failure');
</span><span class='line'>  }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>JQuery has some helpers for authorisation, so the easiest way to get it working is setting <code>xhrFields.withCredentials</code> to <code>true</code> and passing <code>username</code> and <code>password</code> as separate parameters, this way we don&#8217;t have to worry about the intricacies of creating the auth hash ourselves.</p>

<p>Another convenience property is <code>headers</code> which you can use to inject any custom headers you might need, without having to manually do it with <code>beforeSend</code>.</p>

<h2>Apache config</h2>

<p>Another big stumbling block for me was to get the settings for Apache right.</p>

<p>The very first thing you need to do is making sure <code>mod_headers</code> is enabled, which can be as simple as:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ sudo a2enmod headers
</span><span class='line'>$ sudo /etc/init.d/apache2 force-reload</span></code></pre></td></tr></table></div></figure>


<p>Once that&#8217;s done, you can either edit your main <code>httpd.conf</code> or <code>apache.conf</code> files, or just create an <code>.htaccess</code> file in the folder you want to enable CORS in.</p>

<p>These are the settings I ended up with after a lot of experimentation:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>SetEnvIf Origin ^(.*)$ ORIGIN_DOMAIN=$0
</span><span class='line'>&lt;Files "*">
</span><span class='line'>  Header add Access-Control-Allow-Origin %{ORIGIN_DOMAIN}e
</span><span class='line'>  Header add Access-Control-Allow-Methods "GET, OPTIONS"
</span><span class='line'>  Header add Access-Control-Allow-Headers "Authorization, X-Requested-With, Content-Type, Origin, Accept"
</span><span class='line'>  Header add Access-Control-Allow-Credentials "true"
</span><span class='line'>&lt;/Files></span></code></pre></td></tr></table></div></figure>


<p>The first line makes sure that <code>Origin</code> is echoed back, because as it turns out once you have some custom headers a simple <code>*</code> in <code>Access-Control-Allow-Origin</code> won&#8217;t do any more. You can do some URL filtering here if you want, but this setup makes sure that even <code>file:///</code> works which is great for development.</p>

<p>In <code>Access-Control-Allow-Methods</code> we make sure that <code>OPTIONS</code> will work, and with <code>Access-Control-Allow-Headers</code> and <code>Access-Control-Allow-Credentials</code> we set everything up for a basic authorisation handshake.</p>

<p>Annoyingly none of these worked on the simple HTML file I uploaded, until as a desperate idea after a few hours of futile attempts I tried renaming it to PHP extension which made Apache suddenly apply all of them.</p>

<p>If that wasn&#8217;t enough, the unregistered development HTTPS security certificate also blocked my attempts to get things working. If you open any URL on the server you&#8217;re using and accept the certificate this problem will go away, otherwise the options are to <a href="http://superuser.com/questions/27268/how-do-i-disable-the-warning-chrome-gives-if-a-security-certificate-is-not-trust">install / import the certificate on a system level</a> or to start the browser with some flags like <code>--allow-running-insecure-content</code> for Chrome.</p>

<p>Hope this will help someone else facing the same problems!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some thoughts on the fragile relationship between nature conservation and economic growth]]></title>
    <link href="http://danieldemmel.me/blog/2012/09/03/some-thoughts-on-the-fragile-relationship-between-nature-conservation-and-economic-growth/"/>
    <updated>2012-09-03T23:18:00+01:00</updated>
    <id>http://danieldemmel.me/blog/2012/09/03/some-thoughts-on-the-fragile-relationship-between-nature-conservation-and-economic-growth</id>
    <content type="html"><![CDATA[<p><em>Update: I started a small blog / public notebook of all things sustainable / resilient at <a href="http://transientresilient.tumblr.com/">transientresilient.tumblr.com</a></em></p>

<p>As part of the <a href="https://www.coursera.org/course/sustain">Sustainability course on Coursera</a> I&#8217;m currently taking, I had to write a forum post around population growth. It was inspired by an article about the dwindling richness of sound recordings in nature and tried to articulate some thoughts around incorporating nature conservation into the economy.</p>

<blockquote><p><strong>While human population might be internally sustainable, what about our lasting impact on nature?</strong></p>

<p>Just read an article about Bernie Krause experiencing the shocking loss of biodiversity around the World through audio recordings of wildlife taken a few years apart at the same spots: <a href="http://www.guardian.co.uk/environment/2012/sep/03/bernie-krause-natural-world-recordings">http://www.guardian.co.uk/environment/2012/sep/03/bernie-krause-natural-world-recordings</a></p>

<p>It&#8217;s crazy how little respect humanity as a whole has towards untouched nature&#8230; Maybe it&#8217;s time for it to be calculated as part of GDP so that land left alone to nature would contribute to this &#8220;sacred index&#8221; which seems to be the only thing which matters in the industrialised world? I wonder what could rein in our relentless colonisation of Earth with our population still set to rise at least for the next few decades.</p>

<p>Unfortunately the UN can&#8217;t force any country to do things differently than its often short-sighted politicians decide under the intoxicating lure of lobby money, maybe the best hope for a source of change could be regional supranational entities like the EU? The pollution / renewable energy generation targets mandated on the EU level are the only thing which I can see that is shaking the political elite into the barest minimum of action here in the UK. While the wealth generated here in London is just staggering, the city fails to meet basic air quality standards already pushed back from a few years ago after repeatedly failing to meet them.</p>

<p>I&#8217;m from Hungary in Eastern Europe originally, and having moved to the UK I&#8217;m really sad to see as I travel in the countryside here that the industrial revolution left precious little wild nature on this island. Maybe it&#8217;s actually a boon that Eastern Europe wasn&#8217;t caught up in such a crazy rate of &#8220;development&#8221; that the really important things are ignored and sacrificed on the altar of &#8220;progress&#8221;. Maybe it&#8217;s because of the agrarian heritage which inevitably comes with a level of respect towards nature?</p>

<p>In the end I guess my main question is: how could it be possible to include nature as part of the wealth of a nation so that capitalism takes notice?</p></blockquote>

<p>It also made me want to grab my sound recorder and go out to capture sounds of nature, maybe even juxtaposed with recordings from the city.</p>

<hr />

<p>Edit: Oh, just after writing this post I found an article which is just about how to value nature as wealth: <a href="http://www.guardian.co.uk/environment/2012/sep/03/ecuador-yasuni-conservation">http://www.guardian.co.uk/environment/2012/sep/03/ecuador-yasuni-conservation</a></p>

<p>While it starts off really promising&#8230;</p>

<blockquote><p>Just as the species must innovate to survive, Yasuni has inspired the planet&#8217;s most creative and ambitious approach to biodiversity conservation, social development and climate change. Ecuador – which is also home to the Galapagos Islands – is the only country in the world to have recognised the rights of nature in its constitution. After the discovery of a $7.2bn oil reserve inside a pristine corner of the Yasuni national park, the government has proposed leaving the fossil fuel in the ground if the international community will give them half that amount.</p></blockquote>

<p>&#8230;and mentions some interesting numbers and findings&#8230;</p>

<blockquote><p>The UNEP estimates that 40% of the global economy is based on biological products and processes. Biodiversity loss, it says, is becoming a greater concern for businesses than international terrorism.</p></blockquote>

<p>&#8230;apparently the biggest culprits don&#8217;t really care anyway:</p>

<blockquote><p>But what has happened since has been the opposite: because the US, UK and others can consume the assets generated by the amazon jungle for free, they have committed absolutely nothing. The Yasuni ITT initiative has raised a lot less than expected.</p></blockquote>

<p>The sliver of hope though is that while governments don&#8217;t care, people do:</p>

<blockquote><p>The ITT initiative, which covers the Ishpingo, Tambococha and Tiputini oil fields in Yasuni that make up an area of less than one-fifth of Yasuni&#8217;s national park, aims to address this in a core area for protection. Last year, it reached its target of raising $100m thanks to some creative accounting and generous public support (the UK was top for individual donations after featuring in the Guardian), and contributions from Bo Derek, Leonardo DiCaprio, Edward Norton and Al Gore.</p>

<p>Ivonne Baki, who is spearheading the fundraising effort, says the project has now raised $200m, but more is needed. &#8220;The cost of not doing something now will be far higher than the economic crisis. If we are serious about reducing emissions of CO2 and doing something – which is all they talk about at international meetings – then this is the place giving oxygen to the world.&#8221;</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up rmate with Sublime Text for remote file editing over SSH]]></title>
    <link href="http://danieldemmel.me/blog/2012/09/02/setting-up-rmate-with-sublime-text-for-remote-file-editing-over-ssh/"/>
    <updated>2012-09-02T02:20:00+01:00</updated>
    <id>http://danieldemmel.me/blog/2012/09/02/setting-up-rmate-with-sublime-text-for-remote-file-editing-over-ssh</id>
    <content type="html"><![CDATA[<p>If you want to be able to edit files using your local Sublime Text 2 / 3 app over SSH, you can use <code>rmate</code> which is a small remote connection script developed originally for TextMate.</p>

<p>This is how it goes:</p>

<ul>
<li>Install the <a href="https://github.com/henrikpersson/rsub">rsub</a> plugin for ST, which is available through <a href="http://wbond.net/sublime_packages/package_control">Package Control</a> too.</li>
<li>Add a remote forwarding line under the right host in your <code>~/.ssh/config</code> file to enable connection:</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>Host myfancyvps
</span><span class='line'>  Hostname 123.45.67.89
</span><span class='line'>  RemoteForward 52698 127.0.0.1:52698</span></code></pre></td></tr></table></div></figure>


<ul>
<li>SSH in to your remote: <code>ssh myfancyvps</code></li>
<li>Download rmate: <code>curl https://raw.githubusercontent.com/aurora/rmate/master/rmate &gt; rmate</code></li>
<li>Move it in place: <code>sudo mv rmate /usr/local/bin</code> – you can put in <code>~/bin</code> too if you only want to set it up for yourself, but sharing is caring :)</li>
<li>Make it executable: <code>sudo chmod +x /usr/local/bin/rmate</code></li>
<li>Profit: <code>rmate .profile</code> – make sure you have an open ST2 window to enable listening!</li>
</ul>


<p>The main reason why I really like this is because you can also <code>sudo rmate</code> with system config files and be able to actually save them back, as opposed to editing via an SFTP client where you need to log in with <code>root</code> to be able to do this.</p>

<p>Also, don&#8217;t forget to open the port in your <code>iptables</code> if you have a restrictive / whitelist firewall policy: <code>-A INPUT -p tcp --dport 52698 -j ACCEPT</code>. Also you have to do <code>iptables-save</code> and <code>iptables-restore</code> to <a href="http://askubuntu.com/questions/66890/how-can-i-make-a-specific-set-of-iptables-rules-permanent">make these settings persistent after reboot</a>.</p>

<p>A slightly annoying caveat is that a port can&#8217;t be shared with other people if you happen to be logged in at the same time, so you might have to set up separate ports in <code>iptables</code> with the first port number in the <code>RemoteForward</code> setting matching it (the local port should remain the same). In this case you have to specify the port number in each call though: <code>rmate -p 52699</code>. So probably the best is to create an alias in your <code>.profile</code>: <code>alias rsub='rmate -p 52699'</code>, but in this case you also need to add: <code>alias sudo='sudo '</code>. By adding that trailing space you make sure that the <code>sudo</code>&#8216;d command is also checked for alias substitution, so doing <code>sudo rsub my_system_config_file</code> will still work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up Octopress]]></title>
    <link href="http://danieldemmel.me/blog/2012/05/17/setting-up-octopress/"/>
    <updated>2012-05-17T22:18:00+01:00</updated>
    <id>http://danieldemmel.me/blog/2012/05/17/setting-up-octopress</id>
    <content type="html"><![CDATA[<h2>Steps I&#8217;ve taken</h2>

<p>Note: &#8216;username&#8217; is your Github username and &#8216;myblog&#8217; is the name of your blog / site which you&#8217;ll have to replace in the instructions. Don&#8217;t sweat too much about the latter, it&#8217;s just a project name you won&#8217;t necessary have to use on your site.</p>

<h3>Set up Github repository for hosting</h3>

<p>Go to: https://github.com/new</p>

<p>Fill in form and create repo called &#8220;username.github.com&#8221;</p>

<h3>Set up Octopress <a href="http://octopress.org/docs/setup/">&#8594;</a></h3>

<p>If you don&#8217;t have it yet, install <a href="https://github.com/sstephenson/rbenv#section_2">rbenv</a> and <a href="https://github.com/sstephenson/ruby-build#installing-ruby-build">ruby-build</a> (to handle Ruby runtimes and build gems). If you&#8217;re on Windows this is going to be a bit more complicated, but setting up <a href="http://rubyinstaller.org/downloads">RubyInstaller</a> and <a href="https://github.com/oneclick/rubyinstaller/wiki/Development-Kit">Ruby Development Kit</a> is not that bad.</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ rbenv install 1.9.2-p290
</span><span class='line'>$ git clone git://github.com/imathis/octopress.git myblog
</span><span class='line'>$ cd myblog
</span><span class='line'>$ gem install bundler
</span><span class='line'>$ rbenv rehash
</span><span class='line'>$ bundle install
</span><span class='line'>$ rbenv rehash</span></code></pre></td></tr></table></div></figure>


<h3>Get a nice theme <a href="http://zespia.tw/Octopress-Theme-Slash/">&#8594;</a></h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ git clone git://github.com/tommy351/Octopress-Theme-Slash.git .themes/slash
</span><span class='line'>$ rake install['slash']</span></code></pre></td></tr></table></div></figure>


<h3>Configure Octopress <a href="http://octopress.org/docs/configuring/">&#8594;</a></h3>

<p>Edit at least &#8220;Main Configs&#8221; in _config.yml. You can come back later to fill in the rest.</p>

<h3>Set site up for Github Pages</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>Paste your Github repo URL: git@github.com:username/username.github.com.git when prompted.</p>

<p>This will set up some folders and the structure of the Git repos. <code>Master</code> branch will track the actual generated website (the contents of <code>_deploy</code> folder) and <code>source</code> will be the sources you are going to edit.</p>

<h3>Create your first post <a href="http://octopress.org/docs/blogging/">&#8594;</a></h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ rake new_post["Hello World!"]</span></code></pre></td></tr></table></div></figure>


<p>Edit contents of myblog/source/_posts/yyyy-mm-dd-hello-world.markdown</p>

<h3>Generate page and see it in your browser <a href="http://octopress.org/docs/deploying/github/">&#8594;</a></h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ rake generate
</span><span class='line'>$ powify create myblog
</span><span class='line'>$ powify browse myblog</span></code></pre></td></tr></table></div></figure>


<p>See if it&#8217;s all good locally</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ rake deploy</span></code></pre></td></tr></table></div></figure>


<p>Check the real thing: http://username.github.com</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[puts 'Hello world']]></title>
    <link href="http://danieldemmel.me/blog/2012/05/17/puts-hello-world/"/>
    <updated>2012-05-17T21:48:00+01:00</updated>
    <id>http://danieldemmel.me/blog/2012/05/17/puts-hello-world</id>
    <content type="html"><![CDATA[<p>A brave new blog, this time powered by the impressive dream team of <a href="http://www.ruby-lang.org/">Ruby</a>, <a href="http://compass-style.org/">Compass</a>, <a href="http://jekyllrb.com/">Jekyll</a>, <a href="http://octopress.org/">Octopress</a> and <a href="https://github.com/">Github</a>.</p>

<p>No database to worry about, back up and restore. Everything is in a Git repository, kindly hosted and served up to the world by Github.</p>

<p>All content is created in <a href="http://en.wikipedia.org/wiki/Markdown">Markdown</a>, hand typed in <a href="http://mouapp.com/">Mou.app</a>.</p>
]]></content>
  </entry>
  
</feed>
